/root/Codes/part3/rnn/data.py:358: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  tensor_data = torch.load(f'{input_dir}/tensor_data.pt')
tensor([[ 0.0000e+00,  1.0000e+00,  0.0000e+00,  ...,  1.0000e+00,
          0.0000e+00,  1.0000e+00],
        [ 8.4147e-01,  5.4030e-01,  7.6172e-01,  ...,  1.0000e+00,
          1.1548e-04,  1.0000e+00],
        [ 9.0930e-01, -4.1615e-01,  9.8705e-01,  ...,  1.0000e+00,
          2.3096e-04,  1.0000e+00],
        ...,
        [ 9.0179e-01, -4.3218e-01,  8.4488e-01,  ...,  9.9998e-01,
          5.3120e-03,  9.9999e-01],
        [ 1.2357e-01, -9.9234e-01,  1.3992e-01,  ...,  9.9998e-01,
          5.4274e-03,  9.9999e-01],
        [-7.6825e-01, -6.4014e-01, -6.6357e-01,  ...,  9.9998e-01,
          5.5429e-03,  9.9998e-01]])
Parameters: 4.33M
LlamaForCausalLM(
  (model): LlamaModel(
    (embed_tokens): Embedding(49, 128)
    (layers): ModuleList(
      (0-11): 12 x LlamaDecoderLayer(
        (self_attn): LlamaSdpaAttention(
          (q_proj): Linear(in_features=128, out_features=512, bias=False)
          (k_proj): Linear(in_features=128, out_features=512, bias=False)
          (v_proj): Linear(in_features=128, out_features=512, bias=False)
          (o_proj): Linear(in_features=512, out_features=128, bias=False)
          (rotary_emb): LlamaRotaryEmbedding()
        )
        (mlp): LlamaMLP(
          (gate_proj): Linear(in_features=128, out_features=256, bias=False)
          (up_proj): Linear(in_features=128, out_features=256, bias=False)
          (down_proj): Linear(in_features=256, out_features=128, bias=False)
          (act_fn): SiLU()
        )
        (input_layernorm): LlamaRMSNorm((128,), eps=1e-05)
        (post_attention_layernorm): LlamaRMSNorm((128,), eps=1e-05)
      )
    )
    (norm): LlamaRMSNorm((128,), eps=1e-05)
    (rotary_emb): LlamaRotaryEmbedding()
  )
  (lm_head): Linear(in_features=128, out_features=49, bias=False)
)
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 79/79 [00:02<00:00, 27.24it/s]
Initial | val loss: 24.235346468189096 | val acc: 0.0
start training
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 79/79 [00:02<00:00, 32.39it/s]
100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 79/79 [00:02<00:00, 32.41it/s]
Step 0 | Train loss | 24.01846694946289 | Samples 0 | Train acc: 0.0 | Val loss: 24.235346468189096 | Val acc: 0.0 | learning rate: 6.41025641025641e-07
  0%|▊                                                                                                                                                                                                                 | 115/31250 [00:14<42:15, 12.28it/s]Traceback (most recent call last):
Step 79 | Train loss | 13.716885024309159 | Samples 5056 | Train acc: 0.0 | Val loss: 6.0562578816957116 | Val acc: 0.0 | learning rate: 5.128205128205128e-05
  File "rnn/train.py", line 241, in <module>
    main()
  File "rnn/train.py", line 238, in main
    train(model, optimizer, scheduler, train_loader, val_loader, args)
  File "rnn/train.py", line 93, in train
    loss.backward()
  File "/root/miniconda3/lib/python3.8/site-packages/torch/_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "/root/miniconda3/lib/python3.8/site-packages/torch/autograd/__init__.py", line 289, in backward
    _engine_run_backward(
  File "/root/miniconda3/lib/python3.8/site-packages/torch/autograd/graph.py", line 769, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt
