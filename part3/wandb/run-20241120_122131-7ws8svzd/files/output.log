/root/Codes/part3/rnn/data.py:358: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  tensor_data = torch.load(f'{input_dir}/tensor_data.pt')
torch.Size([56, 64])
Parameters: 0.57M
HybridMambaLMHeadModel(
  (backbone): HybridMixerModel(
    (embedding): Embedding(56, 64)
    (layers): ModuleList(
      (0-11): 12 x Block(
        (norm): RMSNorm()
        (mixer): Mamba(
          (in_proj): Linear(in_features=64, out_features=256, bias=False)
          (conv1d): Conv1d(128, 128, kernel_size=(4,), stride=(1,), padding=(3,), groups=128)
          (act): SiLU()
          (x_proj): Linear(in_features=128, out_features=36, bias=False)
          (dt_proj): Linear(in_features=4, out_features=128, bias=True)
          (out_proj): Linear(in_features=128, out_features=64, bias=False)
        )
      )
    )
    (norm_f): RMSNorm()
    (attention): LlamaDecoderLayer(
      (self_attn): LlamaAttention(
        (q_proj): Linear(in_features=64, out_features=512, bias=False)
        (k_proj): Linear(in_features=64, out_features=512, bias=False)
        (v_proj): Linear(in_features=64, out_features=512, bias=False)
        (o_proj): Linear(in_features=512, out_features=64, bias=False)
        (rotary_emb): LlamaRotaryEmbedding()
      )
      (mlp): LlamaMLP(
        (gate_proj): Linear(in_features=64, out_features=256, bias=False)
        (up_proj): Linear(in_features=64, out_features=256, bias=False)
        (down_proj): Linear(in_features=256, out_features=64, bias=False)
        (act_fn): SiLU()
      )
      (input_layernorm): LlamaRMSNorm((64,), eps=1e-05)
      (post_attention_layernorm): LlamaRMSNorm((64,), eps=1e-05)
    )
  )
  (lm_head): Linear(in_features=64, out_features=56, bias=False)
)
  0%|                                                                                                                                                     | 0/20 [00:00<?, ?it/s]The attention layers in this model are transitioning from computing the RoPE embeddings internally through `position_ids` (2D tensor with the indexes of the tokens), to using externally computed `position_embeddings` (Tuple of tensors, containing cos and sin). In v4.46 `position_ids` will be removed and `position_embeddings` will be mandatory.
100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 20/20 [00:06<00:00,  3.17it/s]
Initial | val loss: 13.960922622680664 | val acc: 0.0
start training
100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 20/20 [00:03<00:00,  5.55it/s]
  0%|                                                                                                                                        | 2/7812 [00:33<35:36:56, 16.42s/it]Traceback (most recent call last):
Step 0 | Train loss | 14.02527904510498 | Samples 0 | Train acc: 0.0 | Val loss: 13.960922622680664 | Val acc: 0.0 | learning rate: 5.128205128205128e-06
  File "rnn/train.py", line 242, in <module>
    main()
  File "rnn/train.py", line 239, in main
    train(model, optimizer, scheduler, train_loader, val_loader, args)
  File "rnn/train.py", line 93, in train
    loss.backward()
  File "/root/miniconda3/lib/python3.8/site-packages/torch/_tensor.py", line 521, in backward
    torch.autograd.backward(
  File "/root/miniconda3/lib/python3.8/site-packages/torch/autograd/__init__.py", line 289, in backward
    _engine_run_backward(
  File "/root/miniconda3/lib/python3.8/site-packages/torch/autograd/graph.py", line 769, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
KeyboardInterrupt
